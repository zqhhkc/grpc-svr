// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: pb/pb.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IMMainServiceClient is the client API for IMMainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IMMainServiceClient interface {
	InsertAccount(ctx context.Context, in *AccountInsertReq, opts ...grpc.CallOption) (*AccountInsertRes, error)
	UpdateAccount(ctx context.Context, in *AccountUpdateReq, opts ...grpc.CallOption) (*AccountUpdateRes, error)
	DeleteAccount(ctx context.Context, in *AccountDeleteReq, opts ...grpc.CallOption) (*AccountDeleteRes, error)
	QueryAccount(ctx context.Context, in *AccountQueryReq, opts ...grpc.CallOption) (*AccountQueryRes, error)
	ListAllAccount(ctx context.Context, in *ListAllAccountReq, opts ...grpc.CallOption) (*ListAllAccountRes, error)
}

type iMMainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIMMainServiceClient(cc grpc.ClientConnInterface) IMMainServiceClient {
	return &iMMainServiceClient{cc}
}

func (c *iMMainServiceClient) InsertAccount(ctx context.Context, in *AccountInsertReq, opts ...grpc.CallOption) (*AccountInsertRes, error) {
	out := new(AccountInsertRes)
	err := c.cc.Invoke(ctx, "/pb.IMMainService/InsertAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iMMainServiceClient) UpdateAccount(ctx context.Context, in *AccountUpdateReq, opts ...grpc.CallOption) (*AccountUpdateRes, error) {
	out := new(AccountUpdateRes)
	err := c.cc.Invoke(ctx, "/pb.IMMainService/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iMMainServiceClient) DeleteAccount(ctx context.Context, in *AccountDeleteReq, opts ...grpc.CallOption) (*AccountDeleteRes, error) {
	out := new(AccountDeleteRes)
	err := c.cc.Invoke(ctx, "/pb.IMMainService/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iMMainServiceClient) QueryAccount(ctx context.Context, in *AccountQueryReq, opts ...grpc.CallOption) (*AccountQueryRes, error) {
	out := new(AccountQueryRes)
	err := c.cc.Invoke(ctx, "/pb.IMMainService/QueryAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iMMainServiceClient) ListAllAccount(ctx context.Context, in *ListAllAccountReq, opts ...grpc.CallOption) (*ListAllAccountRes, error) {
	out := new(ListAllAccountRes)
	err := c.cc.Invoke(ctx, "/pb.IMMainService/ListAllAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IMMainServiceServer is the server API for IMMainService service.
// All implementations must embed UnimplementedIMMainServiceServer
// for forward compatibility
type IMMainServiceServer interface {
	InsertAccount(context.Context, *AccountInsertReq) (*AccountInsertRes, error)
	UpdateAccount(context.Context, *AccountUpdateReq) (*AccountUpdateRes, error)
	DeleteAccount(context.Context, *AccountDeleteReq) (*AccountDeleteRes, error)
	QueryAccount(context.Context, *AccountQueryReq) (*AccountQueryRes, error)
	ListAllAccount(context.Context, *ListAllAccountReq) (*ListAllAccountRes, error)
	mustEmbedUnimplementedIMMainServiceServer()
}

// UnimplementedIMMainServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIMMainServiceServer struct {
}

func (UnimplementedIMMainServiceServer) InsertAccount(context.Context, *AccountInsertReq) (*AccountInsertRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertAccount not implemented")
}
func (UnimplementedIMMainServiceServer) UpdateAccount(context.Context, *AccountUpdateReq) (*AccountUpdateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedIMMainServiceServer) DeleteAccount(context.Context, *AccountDeleteReq) (*AccountDeleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedIMMainServiceServer) QueryAccount(context.Context, *AccountQueryReq) (*AccountQueryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAccount not implemented")
}
func (UnimplementedIMMainServiceServer) ListAllAccount(context.Context, *ListAllAccountReq) (*ListAllAccountRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllAccount not implemented")
}
func (UnimplementedIMMainServiceServer) mustEmbedUnimplementedIMMainServiceServer() {}

// UnsafeIMMainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IMMainServiceServer will
// result in compilation errors.
type UnsafeIMMainServiceServer interface {
	mustEmbedUnimplementedIMMainServiceServer()
}

func RegisterIMMainServiceServer(s grpc.ServiceRegistrar, srv IMMainServiceServer) {
	s.RegisterService(&IMMainService_ServiceDesc, srv)
}

func _IMMainService_InsertAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountInsertReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMMainServiceServer).InsertAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.IMMainService/InsertAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMMainServiceServer).InsertAccount(ctx, req.(*AccountInsertReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IMMainService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMMainServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.IMMainService/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMMainServiceServer).UpdateAccount(ctx, req.(*AccountUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IMMainService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMMainServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.IMMainService/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMMainServiceServer).DeleteAccount(ctx, req.(*AccountDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IMMainService_QueryAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMMainServiceServer).QueryAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.IMMainService/QueryAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMMainServiceServer).QueryAccount(ctx, req.(*AccountQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IMMainService_ListAllAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMMainServiceServer).ListAllAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.IMMainService/ListAllAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMMainServiceServer).ListAllAccount(ctx, req.(*ListAllAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

// IMMainService_ServiceDesc is the grpc.ServiceDesc for IMMainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IMMainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.IMMainService",
	HandlerType: (*IMMainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertAccount",
			Handler:    _IMMainService_InsertAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _IMMainService_UpdateAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _IMMainService_DeleteAccount_Handler,
		},
		{
			MethodName: "QueryAccount",
			Handler:    _IMMainService_QueryAccount_Handler,
		},
		{
			MethodName: "ListAllAccount",
			Handler:    _IMMainService_ListAllAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/pb.proto",
}
